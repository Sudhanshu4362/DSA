// https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/description/ 
// traverse on BT vertically if they are in same depth[horizontal same ] then whose value is larger comes first.

/* Approach : 
1.start with a queue of pairs that contain node ,width and depth
2.add root to queue and start removing from queue till queue is not empty 
3.update lmw and rmw
4.now create a map of verticle vs PQ of pair 
5.if verticle is comng first time then create an empty PQ and if it is already present then get that w and add it to PQ
6.add left and right childs to queue
7.now loop through lmw to rmw and create a list and get pq for that w and start removing from pq and add it to list and last add this list to res list and return it.

*/


// code :
class Solution {
    static class Pair implements Comparable<Pair> {
        TreeNode node;
        int w;
        int d;

        Pair(TreeNode node, int w, int d) {
            this.node = node;
            this.w = w;
            this.d = d;
        }

        public int compareTo(Pair other) {
            if(this.d == other.d) {
                //same depth check for values of node
                return this.node.val - other.node.val;
            } else { 
                //not same dept return based on depth
                return this.d - other.d;
            }
        }
    }
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(root,0,1));
        int lmw = 0;
        int rmw = 0;
        HashMap<Integer,PriorityQueue<Pair>> map = new HashMap<>();
        while(q.size() > 0){
            Pair temp = q.remove();

            if(temp.w < lmw){
                lmw = temp.w;
            }
            if(temp.w > rmw){
                rmw = temp.w;
            }

            if(!map.containsKey(temp.w)){
                map.put(temp.w, new PriorityQueue<>());
                map.get(temp.w).add(temp);
            } else {
                map.get(temp.w).add(temp);
            }

            if(temp.node.left != null) {
                q.add(new Pair(temp.node.left,temp.w - 1,temp.d + 1));
            }

            if(temp.node.right != null) {
                q.add(new Pair(temp.node.right,temp.w + 1,temp.d + 1));
            }
        }

        List<List<Integer>> res = new ArrayList<>();
        int idx = 0;

        for(int w = lmw;w <= rmw;w++) {
            ArrayList<Integer> list = new ArrayList<>();
            PriorityQueue<Pair> pq = map.get(w);

            while(pq.size() > 0){
                Pair temp = pq.remove();
                list.add(temp.node.val);
            }
            res.add(list);
            idx++;
        }
        return res;
    }
}